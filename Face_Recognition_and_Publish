'''
/*
 * Copyright 2010-2017 Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *  http://aws.amazon.com/apache2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */
 '''

from AWSIoTPythonSDK.MQTTLib import AWSIoTMQTTClient
import logging
import time
import argparse
import json
import imp
imp.find_module("cv2")
import cv2
import numpy as np
from time import strftime,localtime,sleep
from collections import OrderedDict
recognizer = cv2.createLBPHFaceRecognizer()
recognizer.load("C:/Users/gaura/Desktop/aws/aws-iot-device-sdk-python/samples/basicPubSub/trainer/trainer.yml")
faceDetect = cv2.CascadeClassifier("C:/Users/gaura/Desktop/aws/aws-iot-device-sdk-python/samples/basicPubSub/haarcascade_frontalface_alt2.xml")
AllowedActions = ['both', 'publish', 'subscribe']

# Custom MQTT message callback
def customCallback(client, userdata, message):
    print("Received a new message: ")
    print(message.payload)
    print("from topic: ")
    print(message.topic)
    print("--------------\n\n")


# Read in command-line parameters
parser = argparse.ArgumentParser()
parser.add_argument("-e", "--endpoint", action="store", required=True, dest="host", help="Your AWS IoT custom endpoint")
parser.add_argument("-r", "--rootCA", action="store", required=True, dest="rootCAPath", help="Root CA file path")
parser.add_argument("-c", "--cert", action="store", dest="certificatePath", help="Certificate file path")
parser.add_argument("-k", "--key", action="store", dest="privateKeyPath", help="Private key file path")
parser.add_argument("-p", "--port", action="store", dest="port", type=int, help="Port number override")
parser.add_argument("-w", "--websocket", action="store_true", dest="useWebsocket", default=False,
                    help="Use MQTT over WebSocket")
parser.add_argument("-id", "--clientId", action="store", dest="clientId", default="basicPubSub",
                    help="Targeted client id")
parser.add_argument("-t", "--topic", action="store", dest="topic", default="sdk/test/Python", help="Targeted topic")
parser.add_argument("-m", "--mode", action="store", dest="mode", default="both",
                    help="Operation modes: %s"%str(AllowedActions))
parser.add_argument("-M", "--message", action="store", dest="message", default="Hello World!",
                    help="Message to publish")

args = parser.parse_args()
host = args.host
rootCAPath = args.rootCAPath
certificatePath = args.certificatePath
privateKeyPath = args.privateKeyPath
port = args.port
useWebsocket = args.useWebsocket
clientId = args.clientId
topic = args.topic

if args.mode not in AllowedActions:
    parser.error("Unknown --mode option %s. Must be one of %s" % (args.mode, str(AllowedActions)))
    exit(2)

if args.useWebsocket and args.certificatePath and args.privateKeyPath:
    parser.error("X.509 cert authentication and WebSocket are mutual exclusive. Please pick one.")
    exit(2)

if not args.useWebsocket and (not args.certificatePath or not args.privateKeyPath):
    parser.error("Missing credentials for authentication.")
    exit(2)

# Port defaults
if args.useWebsocket and not args.port:  # When no port override for WebSocket, default to 443
    port = 443
if not args.useWebsocket and not args.port:  # When no port override for non-WebSocket, default to 8883
    port = 8883

# Configure logging
logger = logging.getLogger("AWSIoTPythonSDK.core")
logger.setLevel(logging.DEBUG)
streamHandler = logging.StreamHandler()
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
streamHandler.setFormatter(formatter)
logger.addHandler(streamHandler)

# Init AWSIoTMQTTClient
myAWSIoTMQTTClient = None
if useWebsocket:
    myAWSIoTMQTTClient = AWSIoTMQTTClient(clientId, useWebsocket=True)
    myAWSIoTMQTTClient.configureEndpoint(host, port)
    myAWSIoTMQTTClient.configureCredentials(rootCAPath)
else:
    myAWSIoTMQTTClient = AWSIoTMQTTClient(clientId)
    myAWSIoTMQTTClient.configureEndpoint(host, port)
    myAWSIoTMQTTClient.configureCredentials(rootCAPath, privateKeyPath, certificatePath)

# AWSIoTMQTTClient connection configuration
myAWSIoTMQTTClient.configureAutoReconnectBackoffTime(1, 32, 20)
myAWSIoTMQTTClient.configureOfflinePublishQueueing(-1)  # Infinite offline Publish queueing
myAWSIoTMQTTClient.configureDrainingFrequency(2)  # Draining: 2 Hz
myAWSIoTMQTTClient.configureConnectDisconnectTimeout(10)  # 10 sec
myAWSIoTMQTTClient.configureMQTTOperationTimeout(5)  # 5 sec

# Connect and subscribe to AWS IoT
myAWSIoTMQTTClient.connect()
if args.mode == 'both' or args.mode == 'subscribe':
    myAWSIoTMQTTClient.subscribe(topic, 1, customCallback)
sleep(1)
c=[]
d=[]
message=OrderedDict()
name=""
while True:
    a=raw_input("Enter: ")
    if(a=='1'):
        cam = cv2.VideoCapture(0)
        access = 0
        thief = 0
        font = cv2.cv.InitFont(cv2.cv.CV_FONT_HERSHEY_SIMPLEX, 1, 1, 0, 1, 1) 
        while True:
            ret,img=cam.read()
            gray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
            faces = faceDetect.detectMultiScale(gray,1.1,5)
            for (x,y,w,h) in faces:
                 IDs,conf = recognizer.predict(gray[y:y+h,x:x+w])
                 cv2.rectangle(img,(x,y),(x+w,y+h),(255,153,51),2)
                 if(conf<37):
                     if(IDs == 1 or IDs == 2):
                            if IDs==1:
                                name="Abhay Chirania"
                            elif IDs==2:
                                name="Gaurav Reddy"
                            Id="Identified"
                            access += 1
                 else:
                    Id = "Unidetified"
                    if access >=3:
                        access -= 3
                    else:
                        access = 0
                    thief += 1
                 cv2.cv.PutText(cv2.cv.fromarray(img),str(conf), (x,y+h),font, (0,0,255))
                 cv2.cv.PutText(cv2.cv.fromarray(img),str(Id), (x,y),font, (0,0,255))
            cv2.imshow("Scanning",img)
            if access >= 15:
                 time=strftime("%d/%m/%Y at %H.%M.%S",localtime())
                 f=open("C:/Users/gaura/Desktop/aws/aws-iot-device-sdk-python/samples/basicPubSub/hist.txt","a+")
                 f.write(name+" entered on %s\n"%str(time))
                 f=open("C:/Users/gaura/Desktop/aws/aws-iot-device-sdk-python/samples/basicPubSub/hist.txt","r")
                 f1=f.readlines()
                 for i in reversed(range(0,len(f1))):
                     if i>len(f1)-11:
                         message['message_'+str(len(f1)-i)]=f1[i][:-1]
                         print f1[i],"\n"
                 messageJson = json.dumps(message)
                 myAWSIoTMQTTClient.publish(topic, messageJson, 1)
                 if args.mode == 'publish':
                     print('Published topic %s: %s\n' % (topic, messageJson))
                 f.close()
                 cam.release()
                 cv2.destroyAllWindows()
                 break
            if thief >= 30:
                 time=strftime("%d/%m/%Y at %H.%M.%S",localtime())
                 f=open("C:/Users/gaura/Desktop/aws/aws-iot-device-sdk-python/samples/basicPubSub/hist.txt","a+")
                 f.write("Someone Unidentified entered on %s\n"%str(time))
                 f=open("C:/Users/gaura/Desktop/aws/aws-iot-device-sdk-python/samples/basicPubSub/hist.txt","r")
                 f1=f.readlines()
                 for i in reversed(range(0,len(f1))):
                     if i>len(f1)-11:
                         message['message_'+str(len(f1)-i)]=f1[i][:-1]
                         print f1[i],"\n"
                 messageJson = json.dumps(message)
                 myAWSIoTMQTTClient.publish(topic, messageJson, 1)
                 if args.mode == 'publish':
                     print('Published topic %s: %s\n' % (topic, messageJson))
                 f.close()
                 cam.release()
                 cv2.destroyAllWindows()
                 break
            IDs = 0
            if cv2.waitKey(1) == ord('q'):
                break
